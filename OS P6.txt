OS P6

#include <stdio.h>

#define NUM_PROCESSES 3
#define NUM_RESOURCES 3

void detect_deadlock(int max_matrix[][NUM_RESOURCES], int allocation_matrix[][NUM_RESOURCES], int available_resources[]) {
    int work[NUM_RESOURCES];
    int finish[NUM_PROCESSES];
    int safe_sequence[NUM_PROCESSES];
    int num_safe_processes = 0;
    int i, j;

    // Initialize work to available_resources
    for (i = 0; i < NUM_RESOURCES; i++) {
        work[i] = available_resources[i];
    }

    // Initialize finish to false for all processes
    for (i = 0; i < NUM_PROCESSES; i++) {
        finish[i] = 0;
    }

    // Find a process that can be executed
    for (i = 0; i < NUM_PROCESSES; i++) {
        if (finish[i] == 0) {
            int can_execute = 1;

            // Check if the process can be executed
            for (j = 0; j < NUM_RESOURCES; j++) {
                if (allocation_matrix[i][j] > work[j]) {
                    can_execute = 0;
                    break;
                }
            }

            // If the process can be executed, update work and finish arrays
            if (can_execute == 1) {
                for (j = 0; j < NUM_RESOURCES; j++) {
                    work[j] += allocation_matrix[i][j];
                }
                finish[i] = 1;
                safe_sequence[num_safe_processes] = i;
                num_safe_processes++;

                // Restart the loop to find another process that can be executed
                i = -1;
            }
        }
    }

    // If all processes can be executed, the system is not in a deadlock state
    if (num_safe_processes == NUM_PROCESSES) {
        printf("The system is not in a deadlock state.\n");
    } else {
        printf("The system is in a deadlock state. Deadlocked processes: ");
        for (i = 0; i < NUM_PROCESSES; i++) {
            if (finish[i] == 0) {
                printf("P%d ", i + 1);
            }
        }
        printf("\n");
    }
}

int main() {
    int max_matrix[NUM_PROCESSES][NUM_RESOURCES] = {{3, 6, 8}, {4, 3, 3}, {3, 4, 4}};
    int allocation_matrix[NUM_PROCESSES][NUM_RESOURCES] = {{3, 3, 3}, {2, 0, 3}, {1, 2, 4}};
    int available_resources[NUM_RESOURCES] = {1, 2, 0};

    detect_deadlock(max_matrix, allocation_matrix, available_resources);

    return 0;
}